<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.limingliang.ioc.comment.dao.CommentDao" >
  <resultMap id="BaseResultMap" type="net.limingliang.ioc.comment.dto.Comment" >
    <id column="comment_ID" property="commentId" jdbcType="BIGINT" />
    <result column="comment_post_ID" property="commentPostId" jdbcType="BIGINT" />
    <result column="comment_author" property="commentAuthor" jdbcType="VARCHAR" />
    <result column="comment_author_email" property="commentAuthorEmail" jdbcType="VARCHAR" />
    <result column="comment_author_url" property="commentAuthorUrl" jdbcType="VARCHAR" />
    <result column="comment_author_IP" property="commentAuthorIp" jdbcType="VARCHAR" />
    <result column="comment_date" property="commentDate" jdbcType="TIMESTAMP" />
    <result column="comment_date_gmt" property="commentDateGmt" jdbcType="TIMESTAMP" />
    <result column="comment_content" property="commentContent" jdbcType="VARCHAR" />
    <result column="comment_karma" property="commentKarma" jdbcType="INTEGER" />
    <result column="comment_approved" property="commentApproved" jdbcType="VARCHAR" />
    <result column="comment_agent" property="commentAgent" jdbcType="VARCHAR" />
    <result column="comment_type" property="commentType" jdbcType="VARCHAR" />
    <result column="comment_parent" property="commentParent" jdbcType="BIGINT" />
    <result column="user_id" property="userId" jdbcType="BIGINT" />
    <result column="comment_mail_notify" property="commentMailNotify" jdbcType="TINYINT" />
    <result column="commentCount" property="commentCount" jdbcType="BIGINT" />
    <result column="post_name" property="postName" jdbcType="VARCHAR" />
    <result column="post_date" property="postDate" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    comment_ID, comment_post_ID, comment_author, comment_author_email, comment_author_url, 
    comment_author_IP, comment_date, comment_date_gmt, comment_content, comment_karma, 
    comment_approved, comment_agent, comment_type, comment_parent, user_id, comment_mail_notify
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from blog_comments a left JOIN blog_posts b on  a.comment_post_ID=b.id
    where a.comment_ID = #{commentId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from blog_comments
    where comment_ID = #{commentId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" keyProperty="commentId" useGeneratedKeys="true" parameterType="net.limingliang.ioc.comment.dto.Comment" >
    insert into blog_comments (comment_ID, comment_post_ID, comment_author, 
      comment_author_email, comment_author_url, comment_author_IP, 
      comment_date, comment_date_gmt, comment_content, 
      comment_karma, comment_approved, comment_agent, 
      comment_type, comment_parent, user_id, 
      comment_mail_notify)
    values (#{commentId,jdbcType=BIGINT}, #{commentPostId,jdbcType=BIGINT}, #{commentAuthor,jdbcType=VARCHAR}, 
      #{commentAuthorEmail,jdbcType=VARCHAR}, #{commentAuthorUrl,jdbcType=VARCHAR}, #{commentAuthorIp,jdbcType=VARCHAR}, 
      #{commentDate,jdbcType=TIMESTAMP}, #{commentDateGmt,jdbcType=TIMESTAMP}, #{commentContent,jdbcType=VARCHAR}, 
      #{commentKarma,jdbcType=INTEGER}, #{commentApproved,jdbcType=VARCHAR}, #{commentAgent,jdbcType=VARCHAR}, 
      #{commentType,jdbcType=VARCHAR}, #{commentParent,jdbcType=BIGINT}, #{userId,jdbcType=BIGINT}, 
      #{commentMailNotify,jdbcType=TINYINT})
  </insert>
  <insert id="insertSelective" parameterType="net.limingliang.ioc.comment.dto.Comment" >
    insert into blog_comments
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        comment_ID,
      </if>
      <if test="commentPostId != null" >
        comment_post_ID,
      </if>
      <if test="commentAuthor != null" >
        comment_author,
      </if>
      <if test="commentAuthorEmail != null" >
        comment_author_email,
      </if>
      <if test="commentAuthorUrl != null" >
        comment_author_url,
      </if>
      <if test="commentAuthorIp != null" >
        comment_author_IP,
      </if>
      <if test="commentDate != null" >
        comment_date,
      </if>
      <if test="commentDateGmt != null" >
        comment_date_gmt,
      </if>
      <if test="commentContent != null" >
        comment_content,
      </if>
      <if test="commentKarma != null" >
        comment_karma,
      </if>
      <if test="commentApproved != null" >
        comment_approved,
      </if>
      <if test="commentAgent != null" >
        comment_agent,
      </if>
      <if test="commentType != null" >
        comment_type,
      </if>
      <if test="commentParent != null" >
        comment_parent,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="commentMailNotify != null" >
        comment_mail_notify,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="commentId != null" >
        #{commentId,jdbcType=BIGINT},
      </if>
      <if test="commentPostId != null" >
        #{commentPostId,jdbcType=BIGINT},
      </if>
      <if test="commentAuthor != null" >
        #{commentAuthor,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorEmail != null" >
        #{commentAuthorEmail,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorUrl != null" >
        #{commentAuthorUrl,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorIp != null" >
        #{commentAuthorIp,jdbcType=VARCHAR},
      </if>
      <if test="commentDate != null" >
        #{commentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="commentDateGmt != null" >
        #{commentDateGmt,jdbcType=TIMESTAMP},
      </if>
      <if test="commentContent != null" >
        #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="commentKarma != null" >
        #{commentKarma,jdbcType=INTEGER},
      </if>
      <if test="commentApproved != null" >
        #{commentApproved,jdbcType=VARCHAR},
      </if>
      <if test="commentAgent != null" >
        #{commentAgent,jdbcType=VARCHAR},
      </if>
      <if test="commentType != null" >
        #{commentType,jdbcType=VARCHAR},
      </if>
      <if test="commentParent != null" >
        #{commentParent,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="commentMailNotify != null" >
        #{commentMailNotify,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="net.limingliang.ioc.comment.dto.Comment" >
    update blog_comments
    <set >
      <if test="commentPostId != null" >
        comment_post_ID = #{commentPostId,jdbcType=BIGINT},
      </if>
      <if test="commentAuthor != null" >
        comment_author = #{commentAuthor,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorEmail != null" >
        comment_author_email = #{commentAuthorEmail,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorUrl != null" >
        comment_author_url = #{commentAuthorUrl,jdbcType=VARCHAR},
      </if>
      <if test="commentAuthorIp != null" >
        comment_author_IP = #{commentAuthorIp,jdbcType=VARCHAR},
      </if>
      <if test="commentDate != null" >
        comment_date = #{commentDate,jdbcType=TIMESTAMP},
      </if>
      <if test="commentDateGmt != null" >
        comment_date_gmt = #{commentDateGmt,jdbcType=TIMESTAMP},
      </if>
      <if test="commentContent != null" >
        comment_content = #{commentContent,jdbcType=VARCHAR},
      </if>
      <if test="commentKarma != null" >
        comment_karma = #{commentKarma,jdbcType=INTEGER},
      </if>
      <if test="commentApproved != null" >
        comment_approved = #{commentApproved,jdbcType=VARCHAR},
      </if>
      <if test="commentAgent != null" >
        comment_agent = #{commentAgent,jdbcType=VARCHAR},
      </if>
      <if test="commentType != null" >
        comment_type = #{commentType,jdbcType=VARCHAR},
      </if>
      <if test="commentParent != null" >
        comment_parent = #{commentParent,jdbcType=BIGINT},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="commentMailNotify != null" >
        comment_mail_notify = #{commentMailNotify,jdbcType=TINYINT},
      </if>
    </set>
    where comment_ID = #{commentId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="net.limingliang.ioc.comment.dto.Comment" >
	    update blog_comments
	    set comment_post_ID = #{commentPostId,jdbcType=BIGINT},
	      comment_author = #{commentAuthor,jdbcType=VARCHAR},
	      comment_author_email = #{commentAuthorEmail,jdbcType=VARCHAR},
	      comment_author_url = #{commentAuthorUrl,jdbcType=VARCHAR},
	      comment_author_IP = #{commentAuthorIp,jdbcType=VARCHAR},
	      comment_date = #{commentDate,jdbcType=TIMESTAMP},
	      comment_date_gmt = #{commentDateGmt,jdbcType=TIMESTAMP},
	      comment_content = #{commentContent,jdbcType=VARCHAR},
	      comment_karma = #{commentKarma,jdbcType=INTEGER},
	      comment_approved = #{commentApproved,jdbcType=VARCHAR},
	      comment_agent = #{commentAgent,jdbcType=VARCHAR},
	      comment_type = #{commentType,jdbcType=VARCHAR},
	      comment_parent = #{commentParent,jdbcType=BIGINT},
	      user_id = #{userId,jdbcType=BIGINT},
	      comment_mail_notify = #{commentMailNotify,jdbcType=TINYINT}
	    where comment_ID = #{commentId,jdbcType=BIGINT}
  </update>
  <select id="getFooterComments" resultMap="BaseResultMap">
		select c.*,d.commentCount,e.post_name,e.post_date from (
			SELECT * FROM blog_comments a WHERE NOT EXISTS 
				( SELECT 1 FROM blog_comments b WHERE b.comment_author_email=a.comment_author_email and  b.comment_date>a.comment_date )
				) c 
		left JOIN ( select count(1) as commentCount, comment_author_email from blog_comments GROUP by comment_author_email) d 
		on c.comment_author_email=d.comment_author_email left join blog_posts e on e.ID=c.comment_post_ID order by c.comment_date DESC
  </select>
  <select id="getCommentsByPostId" resultMap="BaseResultMap" parameterType="java.lang.Long">
  		select 
  	<include refid="Base_Column_List" />
  		from blog_comments where 1=1
  	<if test="id !=null">
  		and comment_post_ID = #{id,jdbcType=BIGINT} 
  	</if>
  		and comment_approved ='1' ORDER BY comment_date DESC
  </select>
  <select id="getPostCommentDetail" resultMap="BaseResultMap" parameterType="java.lang.Long">
  	<if test="id !=null" >
  		select b.*,c.post_name,c.post_date from (select count(1) as commentCount, a.* from  (select * from blog_comments where comment_author_email  in 
		(select comment_author_email from blog_comments where comment_ID=  #{id,jdbcType=BIGINT})) a GROUP by a.comment_author_email) b left join blog_posts c on  b.comment_post_ID=c.id
  	</if>
  </select>
  <select id="checkCommentExist" resultType="int" parameterType="net.limingliang.ioc.comment.dto.Comment">
  		select count(*) from blog_comments where 1=1
  	<if test="commentContent != null">
  		and comment_content = #{commentContent,jdbcType=VARCHAR}
  	</if>
    <if test="commentAuthorEmail != null" >
      	and comment_author_email = #{commentAuthorEmail,jdbcType=VARCHAR}
    </if>
    <if test="commentPostId != null" >
        and comment_post_ID = #{commentPostId,jdbcType=BIGINT}
    </if>
  </select>
  <select id="getDateByEmail" resultType="java.util.Date">
  		select max(comment_date) from blog_comments where 1=1
  	<if test="email != null"></if>
  		and comment_author_email=#{email,jdbcType=VARCHAR}
  </select>
</mapper>